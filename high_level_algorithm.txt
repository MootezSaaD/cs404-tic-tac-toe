Global variables:
- char board[][]; (3 x 3)
- int turn = 1; (if 1 => client's turn else server's turn (don't allow client to type)).
- bool gameFinished = false; (true if one the players wins).

Helper functions:

bool checkValid(int x, int y) {

return (x < n && y < n && board[x][y] == '');

}

checkWinner() {
Basically find the one of the following patterns:
--- OR | OR  / OR \
       |    /      \
	     |   /        \
if (patternExists) => gameFinished = true;
displayWinner(); // We can display winner from the characters that present in the pattern : X or O. We assume the the client is X and server is O.
disconnect(); // End the connection because someone has won (to keep things simple).
}

Algorithm:
Initialize socket (depending on the side, Client or Server).
We assume the client is the one who starts playing.

do { 

  if(turn) {

    bool valid = false;
    do {
      readInput(string coordinates);
      valid = checkValid(int x, int y);
    } while(!valid);

    send(string coordinates, int turn = 1); // sending coordinates and the server's turn, i.e. telling the server it is their turn to play.
    displayBoard();
    checkWinner();
}

receive(string coordinates, int turn_client); // same thing from the other side ^.
print("Server's Move %s", x, y); 
displayBoard();
checkWinner();
turn = turn_client;

} while(!gameFinished);
---------------------------------------
Steps:
1) Client enters their name.
2) Client sends their name to the server.
3) Server replies back saying "Hello <CLIENT-NAME>".
4) Server starts first:
	4.1) Client is listening (in C++ recv() is first used).
	4.2) Server sends the first move (in C++ send() is first used).
	4.3) Before the Server sends its move: the board is updated on the Server side (inluding checks on move validity).
	4.4) Server's move is sent to the client.
5) The board is updated at the Client side.
6) The Client enters their move.
7) Same steps as server.
8) Repeat until draw or a party wins.
---------------------------------------
Server:                       | Client:
                              | sendPlayerName();
listen();                     | while(!gameEnded) {
                              |    recvServerMove();
			      |    updateBoard();
                              |    readMoveFromConsole(); 
                                   checkValidMove();
                                   sendMoveToServer();    
getPlayerName();              |}
sendHelloMessage();           |

while(!gameEnded) {
    readMoveFromConsole();
    checkValidMove();
    updateBoard();
    sendMoveToClient();
    listenToClient();
    getMoveFromClient();
    updateBoard();
}



}



